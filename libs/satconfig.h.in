/* libs/satconfig.h.in.  Generated from configure.ac by autoheader.  */


/******************************************************************************
 *   Copyright (C) by Jan Paral and SAT team                                  *
 *   See docs/license/sat file for copying and redistribution conditions.     *
 ******************************************************************************/



/* date */
#undef CONFIGURE_DATE

/* target */
#undef CONFIGURE_TARGET

/* uname -a */
#undef CONFIGURE_UNAME

/* Debug level of output */
#undef DEBUG_LEVEL

/* Define to 1 if you have the <cxxabi.h> header file. */
#undef HAVE_ABI_CXA_DEMANGLE_H

/* Whether your compiler has __attribute__ or not */
#undef HAVE_ATTRIBUTE

/* Whether your compiler has __attribute__ aligned or not */
#undef HAVE_ATTRIBUTE_ALIGNED

/* Whether your compiler has __attribute__ always_inline or not */
#undef HAVE_ATTRIBUTE_ALWAYS_INLINE

/* Whether your compiler has __attribute__ const or not */
#undef HAVE_ATTRIBUTE_CONST

/* Whether your compiler has __attribute__ deprecated or not */
#undef HAVE_ATTRIBUTE_DEPRECATED

/* Whether your compiler has __attribute__ flatten or not */
#undef HAVE_ATTRIBUTE_FLATTEN

/* Whether your compiler has __attribute__ format or not */
#undef HAVE_ATTRIBUTE_FORMAT

/* Whether your compiler has __attribute__ malloc or not */
#undef HAVE_ATTRIBUTE_MALLOC

/* Whether your compiler has __attribute__ may_alias or not */
#undef HAVE_ATTRIBUTE_MAY_ALIAS

/* Whether your compiler has __attribute__ nonnull or not */
#undef HAVE_ATTRIBUTE_NONNULL

/* Whether your compiler has __attribute__ noreturn or not */
#undef HAVE_ATTRIBUTE_NORETURN

/* Whether your compiler has __attribute__ no_instrument_function or not */
#undef HAVE_ATTRIBUTE_NO_INSTRUMENT_FUNCTION

/* Whether your compiler has __attribute__ packed or not */
#undef HAVE_ATTRIBUTE_PACKED

/* Whether your compiler has __attribute__ pure or not */
#undef HAVE_ATTRIBUTE_PURE

/* Whether your compiler has __attribute__ sentinel or not */
#undef HAVE_ATTRIBUTE_SENTINEL

/* Whether your compiler has __attribute__ unused or not */
#undef HAVE_ATTRIBUTE_UNUSED

/* Whether your compiler has __attribute__ visibility or not */
#undef HAVE_ATTRIBUTE_VISIBILITY

/* Whether your compiler has __attribute__ warn unused result or not */
#undef HAVE_ATTRIBUTE_WARN_UNUSED_RESULT

/* Whether your compiler has __attribute__ weak alias or not */
#undef HAVE_ATTRIBUTE_WEAK_ALIAS

/* define if bool is a built-in type */
#undef HAVE_BOOL

/* Whether C++ compiler supports __builtin_expect */
#undef HAVE_BUILTIN_EXPECT

/* Whether C++ compiler supports __builtin_prefetch */
#undef HAVE_BUILTIN_PREFETCH

/* define if the compiler has <climits> header */
#undef HAVE_CLIMITS

/* define if the compiler has complex<T> */
#undef HAVE_COMPLEX

/* define if the compiler has standard complex<T> functions */
#undef HAVE_COMPLEX_FCNS

/* define if the compiler has complex math functions */
#undef HAVE_COMPLEX_MATH1

/* define if the compiler has more complex math functions */
#undef HAVE_COMPLEX_MATH2

/* define if complex math functions are in namespace std */
#undef HAVE_COMPLEX_MATH_IN_NAMESPACE_STD

/* define if the compiler supports const_cast<> */
#undef HAVE_CONST_CAST

/* define if the compiler supports default template parameters */
#undef HAVE_DEFAULT_TEMPLATE_PARAMETERS

/* define if the compiler supports dynamic_cast<> */
#undef HAVE_DYNAMIC_CAST

/* define if the compiler handle computations inside an enum */
#undef HAVE_ENUM_COMPUTATIONS

/* define if the compiler handles (int) casts in enum computations */
#undef HAVE_ENUM_COMPUTATIONS_WITH_CAST

/* define if the compiler supports exceptions */
#undef HAVE_EXCEPTIONS

/* Define to 1 if you have the <execinfo.h> header file. */
#undef HAVE_EXECINFO_H

/* define if the compiler supports the explicit keyword */
#undef HAVE_EXPLICIT

/* define if the compiler supports explicit template function qualification */
#undef HAVE_EXPLICIT_TEMPLATE_FUNCTION_QUALIFICATION

/* define if the compiler has feenableexcept() function */
#undef HAVE_FEENABLEEXCEPT

/* Define to 1 if you have the <fenv.h> header file. */
#undef HAVE_FENV_H

/* define if the compiler recognizes the full specialization syntax */
#undef HAVE_FULL_SPECIALIZATION_SYNTAX

/* define if the compiler supports function templates with non-type parameters
   */
#undef HAVE_FUNCTION_NONTYPE_PARAMETERS

/* Define to 1 if H5Part was found */
#undef HAVE_H5PART

/* Define to 1 if hdf5 was found */
#undef HAVE_HDF5

/* Define to 1 if hdf5 support parallel access */
#undef HAVE_HDF5_PARALLEL

/* define if the compiler supports IEEE math library */
#undef HAVE_IEEE_MATH

/* Define to 1 if you have the <inttypes.h> header file. */
#undef HAVE_INTTYPES_H

/* Define to 1 if you have the <lam_config.h> header file. */
#undef HAVE_LAM_CONFIG_H

/* define if the compiler supports member constants */
#undef HAVE_MEMBER_CONSTANTS

/* define if the compiler supports member templates */
#undef HAVE_MEMBER_TEMPLATES

/* define if the compiler supports member templates outside the class
   declaration */
#undef HAVE_MEMBER_TEMPLATES_OUTSIDE_CLASS

/* Define to 1 if you have the <memory.h> header file. */
#undef HAVE_MEMORY_H

/* Whether we have <mpi.h> header file and we are willing to use it */
#undef HAVE_MPI

/* define if the compiler supports the mutable keyword */
#undef HAVE_MUTABLE

/* define if the compiler implements namespaces */
#undef HAVE_NAMESPACES

/* define if the compiler supports the Numerical C Extensions Group restrict
   keyword */
#undef HAVE_NCEG_RESTRICT

/* define if the compiler supports the __restrict__ keyword */
#undef HAVE_NCEG_RESTRICT_EGCS

/* Define to 1 if libnova was found */
#undef HAVE_NOVA

/* define if the compiler has numeric_limits<T> */
#undef HAVE_NUMERIC_LIMITS

/* define if the compiler accepts the old for scoping rules */
#undef HAVE_OLD_FOR_SCOPING

/* define if we want support for OpenMP */
#undef HAVE_OPENMP

/* define if the compiler supports partial ordering */
#undef HAVE_PARTIAL_ORDERING

/* define if the compiler supports partial specialization */
#undef HAVE_PARTIAL_SPECIALIZATION

/* define if the compiler supports reinterpret_cast<> */
#undef HAVE_REINTERPRET_CAST

/* define if the compiler supports Run-Time Type Identification */
#undef HAVE_RTTI

/* define if the compiler has getrusage() function */
#undef HAVE_RUSAGE

/* Define to 1 if you have the <signal.h> header file. */
#undef HAVE_SIGNAL_H

/* define if the compiler supports static_cast<> */
#undef HAVE_STATIC_CAST

/* define if the compiler supports ISO C++ standard library */
#undef HAVE_STD

/* Define to 1 if you have the <stdint.h> header file. */
#undef HAVE_STDINT_H

/* Define to 1 if you have the <stdlib.h> header file. */
#undef HAVE_STDLIB_H

/* define if the compiler supports Standard Template Library */
#undef HAVE_STL

/* Define to 1 if you have the <strings.h> header file. */
#undef HAVE_STRINGS_H

/* Define to 1 if you have the <string.h> header file. */
#undef HAVE_STRING_H

/* define if the compiler supports System V math library */
#undef HAVE_SYSTEM_V_MATH

/* Define to 1 if you have the <sys/stat.h> header file. */
#undef HAVE_SYS_STAT_H

/* Define to 1 if you have the <sys/types.h> header file. */
#undef HAVE_SYS_TYPES_H

/* define if the compiler supports basic templates */
#undef HAVE_TEMPLATES

/* define if the compiler supports templates as template arguments */
#undef HAVE_TEMPLATES_AS_TEMPLATE_ARGUMENTS

/* define if the compiler supports use of the template keyword as a qualifier
   */
#undef HAVE_TEMPLATE_KEYWORD_QUALIFIER

/* define if the compiler supports template-qualified base class specifiers */
#undef HAVE_TEMPLATE_QUALIFIED_BASE_CLASS

/* define if the compiler supports template-qualified return types */
#undef HAVE_TEMPLATE_QUALIFIED_RETURN_TYPE

/* define if the compiler supports function matching with argument types which
   are template scope-qualified */
#undef HAVE_TEMPLATE_SCOPED_ARGUMENT_MATCHING

/* define if the compiler recognizes typename */
#undef HAVE_TYPENAME

/* define if the compiler supports the vector type promotion mechanism */
#undef HAVE_TYPE_PROMOTION

/* Define to 1 if you have the <unistd.h> header file. */
#undef HAVE_UNISTD_H

/* define if the compiler supports numeric traits promotions */
#undef HAVE_USE_NUMTRAIT

/* define if the compiler has valarray<T> */
#undef HAVE_VALARRAY

/* Define to 1 if you have the <valgrind/callgrind.h> header file. */
#undef HAVE_VALGRIND_CALLGRIND_H

/* define if you want compressed logs */
#undef HAVE_ZLIB

/* Define to 1 if you have the <zlib.h> header file. */
#undef HAVE_ZLIB_H

/* define if the compiler has isnan function in namespace std */
#undef ISNAN_IN_NAMESPACE_STD

/* define if the compiler has C math functions in namespace std */
#undef MATH_FN_IN_NAMESPACE_STD

/* Define to the address where bug reports for this package should be sent. */
#undef PACKAGE_BUGREPORT

/* Copyright of the package */
#undef PACKAGE_COPYRIGHT

/* Define to the full name of this package. */
#undef PACKAGE_NAME

/* Define to the full name and version of this package. */
#undef PACKAGE_STRING

/* Define to the one symbol short name of this package. */
#undef PACKAGE_TARNAME

/* Define to the home page for this package. */
#undef PACKAGE_URL

/* Define to the version of this package. */
#undef PACKAGE_VERSION

/* Is the operating system MacOSX? */
#undef PLATFORM_MACOSX

/* Sringified platfomr name */
#undef PLATFORM_NAME

/* String name of OS */
#undef PLATFORM_OS_NAME

/* Version of OS */
#undef PLATFORM_OS_VERSION

/* Strigified processor name */
#undef PLATFORM_PROCESSOR_NAME

/* Is the operating system UNIX? */
#undef PLATFORM_UNIX

/* Stringified platform vendor */
#undef PLATFORM_VENDOR_NAME

/* Compilation flags (i.e. CXXFLAGS) */
#undef SAT_CXXFLAGS

/* Whether to turn on reference tracking in smart pointers */
#undef SAT_DEBUG_REF_TRACKER

/* Whether to turn on valgrind support. */
#undef SAT_DEBUG_VALGRIND

/* Whether to turn on extensive memory debugging */
#undef SAT_EXTENSIVE_MEMDEBUG

/* Whether to turn on memory tracking during allocation */
#undef SAT_MEMORY_TRACKER

/* Compilation mode */
#undef SAT_MODE

/* Compilation mode is debug */
#undef SAT_MODE_DEBUG

/* Compilation mode is optimize */
#undef SAT_MODE_OPTIMIZE

/* Compilation mode is profile */
#undef SAT_MODE_PROFILE

/* Complete release number of SAT */
#undef SAT_VERSION

/* Standard version number of SAT */
#undef SAT_VERSION_BASE

/* Greek - alpha, beta, etc - release number of SAT */
#undef SAT_VERSION_GREEK

/* Major release number of SAT */
#undef SAT_VERSION_MAJOR

/* Micro release number of SAT */
#undef SAT_VERSION_MICRO

/* Minor release number of SAT */
#undef SAT_VERSION_MINOR

/* Patch revision number of SAT */
#undef SAT_VERSION_PATCH

/* Do we consider patch revision as a part of version tag? */
#undef SAT_WANT_SVN

/* The size of `char', as computed by sizeof. */
#undef SIZEOF_CHAR

/* The size of `double', as computed by sizeof. */
#undef SIZEOF_DOUBLE

/* The size of `float', as computed by sizeof. */
#undef SIZEOF_FLOAT

/* The size of `int', as computed by sizeof. */
#undef SIZEOF_INT

/* The size of `long', as computed by sizeof. */
#undef SIZEOF_LONG

/* The size of `long long', as computed by sizeof. */
#undef SIZEOF_LONG_LONG

/* The size of `short', as computed by sizeof. */
#undef SIZEOF_SHORT

/* The size of `void *', as computed by sizeof. */
#undef SIZEOF_VOID_P

/* Define to 1 if you have the ANSI C header files. */
#undef STDC_HEADERS
